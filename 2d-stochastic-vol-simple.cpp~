#include <algorithm>
#include <chrono>
#include <cmath>
#include <fstream>
#include <gsl/gsl_matrix.h>
#include <gsl/gsl_vector.h>
#include <gsl/gsl_randist.h>
#include <gsl/gsl_rng.h>
#include <iostream>
#include <vector>
#include "2DBrownianMotionPath.hpp"
#include "DataTypes.hpp"
#include "MultivariateNormal.hpp"

void generate_data(std::vector<observable_datum>& ys,
		   std::vector<stoch_vol_datum>& thetas,
		   const parameters& params,
		   unsigned order) {
  std::ofstream output;
  output.open("data.csv");
  
  unsigned N = ys.size();

  double rho_t = 0;
  double rho_tilde_t = logit((rho_t+1)/2);
  
  double x_t = log(100);
  double y_t = log(100);
    
  double log_sigma_x_t = params.alpha_x;
  double log_sigma_y_t = params.alpha_y;

  std::cout << "N+1 = " << N+1 << std::endl;
  std::cout << "log_sigma_x_t = " << log_sigma_x_t << std::endl;

  // setnames(innovations, seq(1,5), c("epsilon_x", "epsilon_y",
  //                                   "eta_x", "eta_y", "eta_rho"))


  //  double * output = new double [(N+1)*9];
    // output = data_table(x = as_numeric(rep(NA,N)),
    //                      y = as_numeric(rep(NA,N)),
    //                      log_sigma_x = as_numeric(rep(NA,N)),
    //                      log_sigma_y = as_numeric(rep(NA,N)),
    //                      rho_tilde = as_numeric(rep(NA,N)))


  // FIRST ROW
  output << "x, y, log.sigma.x, log.sigma.y, rho.tilde \n";
  output << x_t << "," << y_t << ","
	 << log_sigma_x_t << ","
	 << log_sigma_y_t << ","
	 << rho_tilde_t << "\n";
  
  ys[0].x_tm1 = x_t;
  ys[0].y_tm1 = y_t;

  thetas[0].log_sigma_x = log_sigma_x_t;
  thetas[0].log_sigma_y = log_sigma_y_t;
  thetas[0].rho_tilde = rho_tilde_t;

  // output[1, c("x",
  //             "y",
  //             "log_sigma_x",
  //             "log_sigma_y",
  //             "rho_tilde") := as_list(c(x_t,
  //                                       y_t,
  //                                       log_sigma_x_t,
  //                                       log_sigma_y_t,
  //                                       rho_tilde_t))]
  
  const gsl_rng_type * Type;
  gsl_rng_env_setup();
  Type = gsl_rng_default;
  gsl_rng * r_ptr = gsl_rng_alloc(Type);
  
  for (unsigned i=0; i<N; ++i) {
    double log_sigma_x_tp1 = params.alpha_x +
      params.theta_x*(log_sigma_x_t - params.alpha_x) +
      gsl_ran_gaussian(r_ptr, params.tau_x);
    
    double log_sigma_y_tp1 = params.alpha_y +
      params.theta_y*(log_sigma_y_t - params.alpha_y) +
      gsl_ran_gaussian(r_ptr, params.tau_y);
    
    double rho_tp1 = 0.02*sin(2.0*M_PI/256.0*i);
    double rho_tilde_tp1 = logit( (rho_tp1 + 1.0)/2.0 );
    
    // rho_tilde_tp1 = rho_tilde_t + tau_rho*innovations[i-1,eta_rho]
    // rho_tp1 = 2*logit_inv(rho_tilde_tp1) - 1

    BrownianMotion BM = BrownianMotion(order,
				       rho_t,
				       exp(log_sigma_x_t),
				       exp(log_sigma_y_t),
				       x_t,
				       y_t,
				       1.0);
    double x_tp1 = BM.get_x_T();
    double y_tp1 = BM.get_y_T();

    ys[i].x_t = x_tp1;
    ys[i].a_x = BM.get_a();
    ys[i].b_x = BM.get_b();
    // // // // 
    ys[i].y_t = y_tp1;
    ys[i].a_y = BM.get_c();
    ys[i].b_y = BM.get_d();

    if (i < N-1) {
      ys[i+1].x_tm1 = x_tp1;
      ys[i+1].y_tm1 = y_tp1;
      // // // // //
      thetas[i+1].log_sigma_x = log_sigma_x_tp1;
      thetas[i+1].log_sigma_y = log_sigma_y_tp1;
      thetas[i+1].rho_tilde = rho_tilde_tp1;
    }

    x_t = x_tp1;
    y_t = y_tp1;
    log_sigma_x_t = log_sigma_x_tp1;
    log_sigma_y_t = log_sigma_y_tp1;
    rho_tilde_t = rho_tilde_tp1;
    rho_t = rho_tp1;

    output << x_t << "," << y_t << ","
	   << log_sigma_x_t << ","
	   << log_sigma_y_t << ","
	   << rho_tilde_t << "\n";
  }
  
  gsl_rng_free(r_ptr);
  
  output.close();
}

int main(int argc, char *argv[]) {
  if (argc < 9 || argc > 9) {
    printf("You must provide input\n");
    printf("The input is: \n data file list (each file on new line); \noutput directory;\nrelative tolerance for function during mle estimation (as double); \ninitial guess for sigma_x; \ninitial guess for sigma_y; \ninitial guess for rho; \nfile name prefix; \nfile name suffix; \n");
    printf("file names will be PREFIXmle-results-NUMBER_DATA_SET-order-ORDERSUFFIX.csv, stored in the output directory.\n");
    exit(0);
  }

  long unsigned T = 1 * 256 * 6.5 * 3600 * 1000; // one year ms
  long unsigned Delta = 1 * 6.5*3600*1000; // one day in ms
  
  // Values taken from the microstructure paper
  double mu_hat = 1.7e-12;
  double theta_hat = 5.6e-10;
  double alpha_hat = -13;
  double tau_hat = std::sqrt(1.3e-9);

  parameters params;
  params.mu_x = 0; // setting it to zero artificically
  params.mu_y = 0;

  params.alpha_x = alpha_hat + 1.0/2.0*log(Delta);
  params.alpha_y = alpha_hat + 1.0/2.0*log(Delta);

  params.theta_x = exp(-theta_hat * 1.0*Delta);
  params.theta_y = exp(-theta_hat * 1.0*Delta);

  params.tau_x = tau_hat * sqrt((1 - exp(-2*theta_hat*Delta))/(2*theta_hat));
  params.tau_y = tau_hat * sqrt((1 - exp(-2*theta_hat*Delta))/(2*theta_hat));
  params.tau_rho = 0.001;

  params.leverage_x_rho = 0;
  params.leverage_y_rho = 0;

  unsigned N = T/Delta;
  std::vector<observable_datum> ys (N);
  std::vector<stoch_vol_datum> thetas (N);
  
  generate_data(ys,
		thetas,
		params,
		6.5*3600*10);

  unsigned N_particles = 10000;
  std::vector<double> log_weights (N_particles);
  for (unsigned i=0; i<N_particles; ++i) {
    log_weights[i] = 0.0;
  }

  const gsl_rng_type * Type;
  gsl_rng_env_setup();
  Type = gsl_rng_default;
  gsl_rng * r_ptr = gsl_rng_alloc(Type);
  
  std::vector<stoch_vol_datum> theta_tm1 = sample_theta_prior(params,
							      N_particles,
							      r_ptr);

  std::vector<stoch_vol_datum> theta_t = theta_tm1;
  std::vector<unsigned> ks = std::vector<unsigned> (N_particles, 1);

  std::vector<unsigned> particle_indeces = std::vector<unsigned> (N_particles);
  std::iota(std::begin(particle_indeces), std::end(particle_indeces), 0);

  std::ofstream mean_levels;
  mean_levels.open("inference.csv");
  mean_levels << "mean_log_sigma_x, var_log_sigma_x,"
	      << "mean_log_sigma_y, var_log_sigma_y,"
	      << "mean_rho_tilde, var_rho_tilde, NA\n";
  
  for (unsigned tt=1; tt<N; ++tt) {
    observable_datum y_t = ys[tt];
    observable_datum y_tm1 = ys[tt-1];

    std::vector<stoch_vol_datum> theta_t_mean =
      theta_next_mean(theta_tm1,
  		      y_t,
  		      y_tm1,
  		      params);

    std::vector<double> lls = log_likelihoods(y_t,
					      y_tm1,
					      theta_t_mean,
					      params);
    
    auto compare = [&lls, &log_weights](unsigned i, unsigned j)
      { return lls[i] + log_weights[i] < lls[j] + log_weights[j]; };
    
    auto max_index_ptr = std::max_element(std::begin(particle_indeces),
					  std::end(particle_indeces),
					  compare);

    double probs [N_particles];
    for (unsigned index : particle_indeces) {
      probs[index] = exp( lls[index] + log_weights[index] -
				      (lls[*max_index_ptr] +
				       log_weights[*max_index_ptr]) );
    }
    gsl_ran_discrete_t * particle_sampler = gsl_ran_discrete_preproc(N_particles,
								     probs);
    for (unsigned m=0; m<N_particles; ++m) {
      unsigned k = gsl_ran_discrete(r_ptr, particle_sampler);

      theta_t[m] = sample_theta(theta_tm1[k],
				y_t,
				y_tm1,
				params,
				r_ptr);

      double log_new_weight =
	log_likelihood(y_t,
		       y_tm1,
		       theta_t[m],
		       params) -
	log_likelihood(y_t,
		       y_tm1,
		       theta_t_mean[k],
		       params);


      log_weights[m] = log_new_weight;
    }
    
    auto max_weight_iter_ptr = std::max_element(std::begin(log_weights),
						std::end(log_weights));
    // normalizing weights
    std::transform(log_weights.begin(), log_weights.end(), log_weights.begin(),
		   [&max_weight_iter_ptr, &log_weights](double log_weight)
		   {
		     return log_weight - log_weights[*max_weight_iter_ptr];
		   });

    double sum_of_weights = 0.0;
    for (double log_weight : log_weights) {
      sum_of_weights = sum_of_weights + exp(log_weight);
    }

    std::transform(log_weights.begin(), log_weights.end(), log_weights.begin(),
		   [&sum_of_weights, &log_weights](double log_weight)
		   {
		     return log_weight - log(sum_of_weights);
		   });
    
    theta_tm1 = theta_t;
    gsl_ran_discrete_free(particle_sampler);

    std::vector<double> quantiles = compute_quantiles(theta_t,
						  log_weights);
    for (auto& quantile : quantiles) {
      std::cout << quantile << " ";
      mean_levels << quantile << ",";
    }
    std::cout << std::endl;
    mean_levels << "\n";
    
  }
  mean_levels.close();
  
  gsl_rng_free(r_ptr);
  return 0;
}
